// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String?  @unique
  name      String?
  password  String?  // Nullable for OAuth-only accounts
  avatarUrl String?
  bio       String?
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  followers      Follow[]         @relation("Followee")
  following      Follow[]         @relation("Follower")
  sentFollowRequests     FollowRequest[] @relation("SentFollowRequests")
  receivedFollowRequests FollowRequest[] @relation("ReceivedFollowRequests")
  oauthAccounts  OAuthAccount[]
  refreshTokens  JWTRefreshToken[]
  
  // Trip relations
  trips          Trip[]
  tripParticipants TripParticipant[]
  threadEntries  TripThreadEntry[]
  threadTags     TripThreadTag[]
  media          Media[]

  @@map("users")
}

model OAuthAccount {
  id             String        @id @default(uuid())
  provider       OAuthProvider
  providerUserId String
  userId         String
  createdAt      DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("oauth_accounts")
}

enum OAuthProvider {
  GOOGLE
  APPLE
}

model Follow {
  id         String   @id @default(uuid())
  followerId String
  followeeId String
  createdAt  DateTime @default(now())

  follower User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@map("follows")
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FollowRequest {
  id          String              @id @default(uuid())
  followerId  String
  followingId String
  status      FollowRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  follower    User                @relation("SentFollowRequests", fields: [followerId], references: [id], onDelete: Cascade)
  following   User                @relation("ReceivedFollowRequests", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follow_requests")
}

model JWTRefreshToken {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("jwt_refresh_tokens")
}

// Trip Lifecycle Models
enum TripStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum TripMood {
  RELAXED
  ADVENTURE
  SPIRITUAL
  CULTURAL
  PARTY
  MIXED
}

enum TripType {
  SOLO
  GROUP
  COUPLE
  FAMILY
}

enum ThreadEntryType {
  TEXT
  MEDIA
  LOCATION
  CHECKIN
}

enum MediaType {
  IMAGE
  VIDEO
}

model Trip {
  id             String             @id @default(uuid())
  userId         String
  title          String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  destinations   String[]           // Array of city/country names
  mood           TripMood?
  type           TripType?
  coverMediaUrl  String?
  status         TripStatus         @default(UPCOMING)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadEntries  TripThreadEntry[]
  media          Media[]
  finalPost      TripFinalPost?
  participants   TripParticipant[]

  @@map("trips")
}

model TripParticipant {
  id        String   @id @default(uuid())
  tripId    String
  userId    String
  role      String   @default("member") // member, cohost, etc.
  joinedAt  DateTime @default(now())

  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
  @@map("trip_participants")
}

model TripThreadEntry {
  id              String             @id @default(uuid())
  tripId          String
  authorId        String             // Can allow participants to post
  type            ThreadEntryType
  contentText     String?
  mediaUrl        String?
  locationName    String?
  gpsCoordinates  Json?              // { lat: ..., lng: ... }
  createdAt       DateTime           @default(now())

  trip            Trip               @relation(fields: [tripId], references: [id], onDelete: Cascade)
  author          User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  taggedUsers     TripThreadTag[]
  media           Media?             @relation(fields: [mediaId], references: [id])
  mediaId         String?

  @@map("trip_thread_entries")
}

model TripThreadTag {
  id              String   @id @default(uuid())
  threadEntryId   String
  taggedUserId    String

  threadEntry     TripThreadEntry @relation(fields: [threadEntryId], references: [id], onDelete: Cascade)
  taggedUser      User            @relation(fields: [taggedUserId], references: [id], onDelete: Cascade)

  @@unique([threadEntryId, taggedUserId])
  @@map("trip_thread_tags")
}

model TripFinalPost {
  id              String   @id @default(uuid())
  tripId          String   @unique
  summaryText     String
  curatedMedia    String[] // Array of URLs
  caption         String?
  isPublished     Boolean  @default(false)
  createdAt       DateTime @default(now())

  trip            Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("trip_final_posts")
}

model Media {
  id              String             @id @default(uuid())
  url             String
  type            MediaType
  filename        String?
  size            Int?
  uploadedById    String
  tripId          String?
  createdAt       DateTime           @default(now())

  uploadedBy      User               @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  trip            Trip?              @relation(fields: [tripId], references: [id], onDelete: Cascade)
  threadEntries   TripThreadEntry[]

  @@map("media")
}